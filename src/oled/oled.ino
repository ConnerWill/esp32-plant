#include "WiFi.h"
#include "ESPAsyncWebServer.h"
#include "DHTesp.h"
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// ============================================================================
// CONFIGURATION --------------------------------------------------------------
// ============================================================================
constexpr char WIFI_SSID[]     = "YourNetworkName"; // Wi-Fi SSID
constexpr char WIFI_PASSWORD[] = "YourNetworkPass"; // Wi-Fi password
constexpr char WIFI_HOSTNAME[] = "esp32-oled";      // Hostname

constexpr int  SERVER_PORT = 80;    // Port for the web server
constexpr char SERVER_PATH[] = "/"; // Path for serving the data

constexpr int CO2_PIN = 35; // Analog pin for CO2 sensor
constexpr int DHT_PIN = 27; // GPIO pin for DHT sensor

#define SCREEN_WIDTH 128        // OLED display width, in pixels
#define SCREEN_HEIGHT 64        // OLED display height, in pixels
#define SCREEN_UPDATE_TIME 1000 // Time to wait before updating OLED (ms)
#define SCREEN_ADDRESS 0x3C     // Address of OLED display (could also be '0x3D' depending on screen resolution)
#define SCREEN_STARTUP_DISPLAY_TIME 3000 // Startup screen delay time

constexpr int BAUD_RATE = 115200; // Baud rate

// BAYER COLORS
// bitmap of icon image (https://javl.github.io/image2cpp)
const unsigned char bitmap_image [] PROGMEM = {
// 'mustang-resized', 128x64px
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x70, 0x00, 0x01, 0x80, 0x01, 0x40, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x14, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1f, 0xfc,
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xff, 0xff,
0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x7f, 0xe0, 0x00, 0x00, 0x80, 0x00, 0x04, 0x1f, 0xff, 0xff,
0x00, 0x00, 0x00, 0x00, 0xff, 0x81, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x02, 0x7f, 0xff, 0xff,
0x00, 0x00, 0x00, 0x07, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff,
0x00, 0x00, 0x00, 0x0f, 0xef, 0xfc, 0xff, 0xff, 0xff, 0xf8, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff,
0x00, 0x00, 0x00, 0x7f, 0xff, 0x8f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x07, 0xff, 0xff, 0xff,
0x00, 0x00, 0x08, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff,
0x00, 0x00, 0x20, 0x00, 0x01, 0xfe, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x03, 0x07, 0xff, 0xff, 0xff,
0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0x1f, 0xff, 0xff, 0xff,
0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x01, 0xfb, 0x9f, 0x80, 0x00, 0x00, 0x39, 0xff, 0xff, 0xff,
0x00, 0x00, 0x20, 0x03, 0xbd, 0x10, 0x03, 0x80, 0x30, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0x20, 0x00, 0x15, 0x80, 0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0xa0, 0x03, 0xff, 0xc0, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0x40, 0x0b, 0xff, 0x80, 0x06, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xff, 0xff, 0xff, 0xff,
0x00, 0x00, 0x80, 0x0b, 0xfe, 0x00, 0x00, 0x00, 0x04, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc,
0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc,
0x00, 0x01, 0x00, 0x00, 0x1f, 0xf4, 0x18, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0,
0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00,
0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x40, 0x3f, 0xfc, 0x3f, 0xff, 0xff, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x40, 0x78, 0x00, 0x07, 0xff, 0xff, 0x02, 0x00,
0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x01, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 0x83, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x02, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xf3, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x78, 0x00, 0x60, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// BINARY COLORS
// // bitmap of icon image (https://javl.github.io/image2cpp)
// const unsigned char bitmap_image [] PROGMEM = {
// // 'mustang-resized', 128x64px
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x70, 0x00, 0x01, 0x80, 0x01, 0x40, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x14, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1f, 0xfc,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x7f, 0xe0, 0x00, 0x00, 0x80, 0x00, 0x04, 0x1f, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0xff, 0x81, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x02, 0x7f, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x07, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x0f, 0xef, 0xfc, 0xff, 0xff, 0xff, 0xf8, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x7f, 0xff, 0x8f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x07, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x08, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff,
// 0x00, 0x00, 0x20, 0x00, 0x01, 0xfe, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x03, 0x07, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0x1f, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x01, 0xfb, 0x9f, 0x80, 0x00, 0x00, 0x39, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x20, 0x03, 0xbd, 0x10, 0x03, 0x80, 0x30, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x20, 0x00, 0x15, 0x80, 0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0xa0, 0x03, 0xff, 0xc0, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x40, 0x0b, 0xff, 0x80, 0x06, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xff, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x80, 0x0b, 0xfe, 0x00, 0x00, 0x00, 0x04, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc,
// 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc,
// 0x00, 0x01, 0x00, 0x00, 0x1f, 0xf4, 0x18, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc,
// 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0,
// 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00,
// 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x20,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x40, 0x3f, 0xfc, 0x3f, 0xff, 0xff, 0x80, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x40, 0x78, 0x00, 0x07, 0xff, 0xff, 0x02, 0x00,
// 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x01, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 0x83, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x02, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xf3, 0x00, 0x00,
// 0x00, 0x01, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x78, 0x00, 0x60, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
// };


// ============================================================================

// ============================================================================
// GLOBAL INSTANCES -----------------------------------------------------------
// ============================================================================
DHTesp dht;
AsyncWebServer server(SERVER_PORT);

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// ============================================================================

// ============================================================================
// FUNCTIONS ------------------------------------------------------------------
// ============================================================================

// Function to get the CO2 measurement 
int readCO2() {
  static const float ReferenceVoltage  = 3.3;
  static const float MaxAdcValue       = 4095.0;
  static const float VoltageThreshold  = 0.4;
  static const float CalibrationFactor = 5000.0;
  static const float VoltageOffset     = 1.6;

  int adcVal = analogRead(CO2_PIN);                          // Read analog value from CO2 sensor
  float voltage = adcVal * (ReferenceVoltage / MaxAdcValue); // Calculate voltage based on ADC value

  // Calculate CO2 measurement based on voltage difference
  if (voltage == 0 || voltage < VoltageThreshold) {
    return 0; // Return 0 for sensor errors or pre-heating
  } else {
    float voltageDifference = voltage - VoltageThreshold;
    return static_cast<int>((voltageDifference * CalibrationFactor) / VoltageOffset);
  }
}

// Function to read temperature
float readTemperature() {
  return dht.getTemperature();
}

// Function to read humidity
float readHumidity() {
  return dht.getHumidity();
}

// Function to convert Celsius to Fahrenheit
float celsiusToFahrenheit(float celsius) {
    float fahrenheit = (celsius * 9.0 / 5.0) + 32.0;
    return fahrenheit;
}

// Function to connect to Wi-Fi
void connectToWiFi() {
  Serial.println("Setting up Wi-Fi...");
  if (!WiFi.setHostname(WIFI_HOSTNAME)) {
    Serial.println("Error: Failed to set Wi-Fi hostname");
  }

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Wi-Fi Connected");
  Serial.printf("IP: %s\n", WiFi.localIP().toString().c_str());
  Serial.printf("Hostname: %s\n", WiFi.getHostname());
}

// Function to initialize OLED
void initOLED() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("Failed to start SSD1306 OLED"));
    while (1);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Starting up...");
  display.setCursor(0, 10);
  display.println("Initializing...");
  display.display();
  delay(SCREEN_STARTUP_DISPLAY_TIME);
  display.clearDisplay(); // Clear display after delay


  // Display bitmap
  oled.clearDisplay();
  display.drawBitmap(0, 0, bitmap_image, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
  oled.display();
  delay(SCREEN_STARTUP_DISPLAY_TIME);

  // Invert display
  oled.invertDisplay(1);
  delay(SCREEN_STARTUP_DISPLAY_TIME);


  display.display();
}

// Function to update the OLED with sensor readings
void updateOLED(int co2, float temperature, float humidity) {
  display.clearDisplay();

  // IP Address
  display.setCursor(0, 0);
  display.print("IP: ");
  display.println(WiFi.localIP().toString().c_str());

  // Temperature
  display.setCursor(0, 10);
  display.print("Temp: ");
  display.print(temperature);
  display.println(" C");

  // Humidity
  display.setCursor(0, 20);
  display.print("Humidity: ");
  display.print(humidity);
  display.println(" %");

  // CO2
  display.setCursor(0, 30);
  display.print("CO2: ");
  display.print(co2);
  display.println(" ppm");

  // Update Display
  display.display();
}

// ============================================================================

void setup() {
  // Set co2 pin mode
  pinMode(CO2_PIN, INPUT);

  // Initialize DHT sensor
  dht.setup(DHT_PIN, DHTesp::DHT_MODEL_t::DHT22);

  // Initialize Serial for debugging
  Serial.begin(BAUD_RATE);

  // Initialize OLED
  initOLED();

  // Connect to Wi-Fi
  connectToWiFi();

  // Define the root endpoint
  server.on(SERVER_PATH, HTTP_GET, [](AsyncWebServerRequest* request) {
    // Create a JSON document
    StaticJsonDocument<256> jsonDoc;

    // Get sensor values
    int co2 = readCO2();
    float temperature = readTemperature();
    float temperatureF = celsiusToFahrenheit(temperature);
    float humidity = readHumidity();

    // Add values to the JSON document
    jsonDoc["co2"]          = co2;
    jsonDoc["temperature"]  = isnan(temperature)  ? 0 : temperature;  // Handle NaN
    jsonDoc["temperatureF"] = isnan(temperatureF) ? 0 : temperatureF; // Handle NaN
    jsonDoc["humidity"]     = isnan(humidity)     ? 0 : humidity;     // Handle NaN

    // Serialize JSON to string
    String jsonString;
    serializeJson(jsonDoc, jsonString);

    // Send the JSON response
    request->send(200, "application/json", jsonString);

  });

  // Start the server
  server.begin();
  Serial.println("Server started.");
}

void loop() {

  // Get sensor values
  int co2 = readCO2();
  float temperature = readTemperature();
  float temperatureF = celsiusToFahrenheit(temperature);
  float humidity = readHumidity();

  // Debug values
  Serial.printf("Temperature: %s C\n", temperature);
  Serial.printf("Temperature: %s F\n", temperatureF);
  Serial.printf("Humidity   : %s %%\n", humidity);
  Serial.printf("co2        : %s ppm\n", co2);
  Serial.println("Updating display...");

  // Update OLED display with latest sensor data
  updateOLED(co2, temperature, humidity);

  delay(SCREEN_UPDATE_TIME);
}
